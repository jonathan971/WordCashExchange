# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages
name: Node.js Package with Redis

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  setup-redis:
    needs: build
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - name: Wait for Redis to be ready
        run: sleep 5 # Wait for Redis to start
      # You can add additional configuration steps for Redis if needed.

  connect-to-redis:
    needs: setup-redis
    runs-on: ubuntu-latest
    steps:
      - name: Configure Node.js to connect to Redis
        run: |
          # Example code to configure your Node.js application to connect to Redis.
          # Replace with your actual configuration.
          npm install redis
          echo "const redis = require('redis');
          const client = redis.createClient({
            host: 'localhost', // Redis host (use the service name 'redis' if using GitHub Actions service)
            port: 6379, // Redis port
          });

          client.on('connect', function() {
            console.log('Connected to Redis');
          });

          client.on('error', function(err) {
            console.error('Redis error:', err);
          });

          // Use the 'client' object to interact with Redis in your Node.js application.
          " > redis.js
        env:
          NODE_ENV: production # Set your desired Node.js environment

  publish-npm:
    needs: connect-to-redis
    runs-on: ubuntu-latest
    steps:
      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}
